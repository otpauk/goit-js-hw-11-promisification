{"version":3,"sources":["js/task1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":";AAOA,IAAMA,EAAQ,SAAAC,GACL,OAAA,IAAIC,QAAQ,SAACC,GAClBC,WAAW,WACTD,EAAQF,IACPA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAEnBC,QAAQC,IAAI,WAEZR,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ","file":"task1.107d7d96.js","sourceRoot":"..\\src","sourcesContent":["// Task #1\r\n\r\n// Напиши функцию delay(ms), которая возвращает промис, \r\n// переходящий в состояние \"resolved\" через ms миллисекунд.\r\n// Значением исполнившегося промиса должно быть то кол - во\r\n// миллисекунд которое передали во время вызова функции delay.\r\n\r\nconst delay = ms => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);  \r\n  });    \r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\nconsole.log('Task #1');\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n"]}